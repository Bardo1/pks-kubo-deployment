<%=
# This file is required by the bosh-dns job which is applied through the runtime config

def wildcard_name(name)
  name.split('.').collect!.with_index {|s, i| (i == 0) ? '*' : s}.join('.')
end

master_node_dns = link('kubernetes-api').address
aliases = { 'master.kubo' => [ wildcard_name(master_node_dns) ] }

etcd_addresses = link('etcd').instances.map { |instance| instance.address }
# for etcd.service.cf.internal

etcd_advertise_urls_dns_suffix = link('etcd').p('etcd.advertise_urls_dns_suffix')
aliases.merge!({ etcd_advertise_urls_dns_suffix => etcd_addresses })

link('etcd').instances.each do |instance|
  node_name = "#{instance.name}-#{instance.index}"
  raise "node name can't be empty" if !node_name
  etcd_alias = "#{node_name}.#{etcd_advertise_urls_dns_suffix}"
  aliases.merge!({ etcd_alias => [instance.address] })
end

# for etcd.service.consul

etcd_consul_dns_suffix = 'etcd.service.consul'
aliases.merge!({ etcd_consul_dns_suffix => etcd_addresses })

link('etcd').instances.each do |instance|
  node_name = "#{instance.name}-#{instance.index}"
  raise "node name can't be empty" if !node_name
  etcd_alias = "#{node_name}.#{etcd_consul_dns_suffix}"
  aliases.merge!({ etcd_alias => [instance.address] })
end


JSON.dump(aliases)
%>
